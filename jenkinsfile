components = ''
PR = ''

pipeline {
    agent any

    environment {
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
	GH_NO_UPDATE_NOTIFIER = 1
    }

    stages {
        stage('Checkout branch') {
            when {
                branch 'main'
            }
            steps {
                script {
                    branchName = env.BRANCH_NAME
                    echo "+++ Found branch: ${branchName}"
                }
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: branchName]],
                    userRemoteConfigs: [[credentialsId: 'github',
                                        url: "git@github.com:ivngmz/jenkins.git"]]
                ])
            }
        }
        stage('Test Push') {
            when {
                branch 'main'
            }
            steps {
                   echo "+ Job has been runned"
                script {
                    sh 'printenv'
                    env.PR = sh(returnStdout: true, script: "gh api --jq .[].number /repos/ivngmz/jenkins/commits/$GIT_COMMIT/pulls").replaceAll("\\s","")
                            echo "+ PR number -> env.PR" 

                            if (PR != ''){

                                status_PR = sh(returnStdout: true, script: "gh api --jq .state /repos/ivngmz/jenkins/pulls/${env.PR}").replaceAll("\\s","")
                                merged_PR = sh(returnStdout: true, script: "gh api --jq .merged /repos/ivngmz/jenkins/pulls/${env.PR}").replaceAll("\\s","")
                                echo "++ Current PR status -> $status_PR and merged -> $merged_PR "

                                // Only merged PR will be checked
                                if ( status_PR == 'closed' && merged_PR == 'true' ){
                                    labels = sh(returnStdout: true, script: "gh api --jq '.labels.[].name' /repos/ivngmz/jenkins/pulls/${env.PR}")
                                    echo "+++ Found label:${labels}"
                        echo "+++ This time flow has been covered"
                        components = 'componentTest'
                        }
                    }
                }  
            }
        }
        stage('Publish components') {
            // Requires when execution if components
            when {
                expression { components != null }
            }
            steps {
		
                script {
		    PR = env.PR
                    if ( PR != '' ) {
                        domtest='test'
                        echo "+ Publishing job for components:${components}"
                        sh "scripts/publish.sh ${domtest} ${components}"
                    }
                    else {
                        echo "There is no components to publish"
                    }
                }
            }
        }
    }
}
